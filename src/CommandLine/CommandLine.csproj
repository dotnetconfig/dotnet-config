<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <PackageId>DotNetConfig.CommandLine</PackageId>
    <Description>Extensions to System.CommandLine to automatically read default values from .netconfig files.

Usage:
   var root = new RootCommand
   {
     // child commands, arguments, options
   }.WithConfigurableDefaults();


The following heuristics are applied when providing default values:

* Only arguments/options without a default value are processed.
* Section matches root command name, subsection (dot-separated) for each additional nested 
  command level (i.e. `[mytool "mycommand.myverb"]`).
* Compatible arguments/options (same name/type) can be placed in ancestor section/subsection to affect 
  default value of entire subtree.
* All the types supported by System.CommandLine for multiple artity arguments and options are 
  automatically populated: arrays, `IEnumerable{T}`, `ICollection{T}`, `IList{T}` and `List{T}`: 
  .netconfig can provide multi-valued variables for those.
* Numbers can be either `int` or `long`.

</Description>

    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>DotNetConfig.CommandLine</AssemblyName>
    <RootNamespace>DotNetConfig</RootNamespace>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Deterministic>true</Deterministic>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\Config\Range.cs" Link="Range.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta1.21216.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Config\Config.csproj" />
  </ItemGroup>

</Project>
